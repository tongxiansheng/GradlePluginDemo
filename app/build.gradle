apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

class MyFirstPlugin implements Plugin<Project>{

    @Override
    void apply(Project project){
        project.task('hello first'){
            doLast {
                println "hello gradle plugin from first"
            }
        }
    }
}

class MySecondPluginExtension{
    String message = "hello gradle plugin from second"
    //嵌套Extension
    NestExtension nest = new NestExtension()
    //定义一个 NamedDomainObjectContainer 属性
    NamedDomainObjectContainer<TestDomainObj> testDomains

    //创建内部Extension
    void nesta(Action<NestExtension> action) {
        action.execute(nest)
    }

    public MySecondPluginExtension(Project project) {
        //通过 project.container(...) 方法创建 NamedDomainObjectContainer
        NamedDomainObjectContainer<TestDomainObj> domainObjs = project.container(TestDomainObj)
        testDomains = domainObjs
    }

    //让其支持 Gradle DSL 语法
    void testDomain(Action<NamedDomainObjectContainer<TestDomainObj>> action) {
        action.execute(testDomains)
    }

    void test() {
        //遍历命名领域对象容器，打印出所有的领域对象值
        testDomains.all { data ->
            println data
        }
    }
}

class NestExtension{
    String type = "phone"
}

class TestDomainObj {

    //必须定义一个 name 属性，并且这个属性值初始化以后不要修改
    String name

    String msg

    //构造函数必须有一个 name 参数
    public TestDomainObj(String name) {
        this.name = name
    }

    void msg(String msg) {
        this.msg = msg
    }

    String toString() {
        return "name = ${name}, msg = ${msg}"
    }
}

class MySecondPlugin implements Plugin<Project>{

    @Override
    void apply(Project project){
        def extension  = project.extensions.create('second', MySecondPluginExtension, project)
        project.task('hello second'){
            doLast {
                println extension.message
                println extension.nest.type
                extension.test()
            }
        }
    }
}

apply plugin: MyFirstPlugin
apply plugin: MySecondPlugin
apply plugin: 'thirdplugin'

second {
    message = "message from extension"
    nesta {
        type = "tv"
    }
    testDomain {
        domain2 {
            msg "This is domain2"
        }
        domain1 {
            msg "This is domain1"
        }
        domain3 {
            msg "This is domain3"
        }
    }
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.gradleplugindemo"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation project(":mylibrary")
}
